# openapi: 3.0.0
# info:
#   title: Recipes api
#   description: API for recipes project
#   version: 1.0.1
# servers:
# # local:
# - url: "http://127.0.0.1:3000"
# # remote:
# # - url: "http://132.72.65.211"
#   description: SwaggerHub API Auto Mocking hey
# tags:
# - name: Auth
#   description: All authentication related routes
# - name: Users
#   description: All the user's personal app info
# - name: Recipes
#   description: All reciepes general info
# paths:
#   /register:
#     post:
#       tags:
#       - Auth
#       summary: A new user from the client is added to the server
#       description: A JSON object contains all the details about the new user.
#       requestBody:
#         description: Inventory item to add
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/User'
#         required: true
#       responses:
#         "201":
#           description: A new user has been added
#         "400":
#           description: wrong input parameters
#   /login:
#     post:
#       tags:
#       - Auth
#       summary: Login an exist user
#       description: An exist user login to the system
#       requestBody:
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/LoginScheme'
#         required: true
#       responses:
#         "200":
#           description: |
#             User was found in the DB and authenitcated successfully. The session ID is returned in a cookie named `session`.  You should include this cookie in subsequent requests
#           headers:
#             Set-Cookie:
#               style: simple
#               explode: false
#               schema:
#                 type: string
#                 example: session=87s97sdhgf279293f8w0e9
#         "401":
#           description: Authentication failed
#   /logout:
#     post:
#       tags:
#         - Auth
#       summary: logout a user from the system and delete his cookie
#       responses:
#         "200":
#           description: "the user has ben successfully logged out"
#   /users/favorites:
#     get:
#       tags:
#       - Users
#       summary: Return the favorite recipes that were saved by user
#       description: Get an array of recipes that were saved by a specific user
#       responses:
#         "200":
#           description: data about the user's favorites recipes returned
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/RecipePreview'
#         "401":
#           description: user is not authorized
#       security:
#       - cookieAuth: []
#     post:
#       tags:
#       - Users
#       summary: save recipe in the favorites list of a user
#       description: save recipe in the favorites list of a user
#       requestBody:
#         content:
#           application/json:
#             schema:
#               type: object
#               properties:
#                 reciepeId:
#                   type: string
#                   description: reciepe's id which the user saved
#                   example: 716429
#       responses:
#         "200":
#           description: The Recipe successfully saved as favorite
#         "401":
#           description: user is not authorized
#       security:
#       - cookieAuth: []
#   /recipes/{recipeId}:
#     get:
#       tags:
#       - Recipes
#       summary: Return preview details on recipe by his ID
#       description: Return preview details on recipe by his ID
#       parameters:
#       - name: recipeId
#         in: path
#         description: recipe's id
#         required: true
#         style: simple
#         explode: false
#         schema:
#           type: integer
#       responses:
#         "200":
#           description: data about the recipe
#           content:
#             application/json:
#               schema:
#                 $ref: '#/components/schemas/RecipePreview'
#         "404":
#           description: recipeId is not exists
# components:
#   schemas:
#     User:
#       type: object
#       properties:
#         username:
#           maxLength: 8
#           minLength: 3
#           type: string
#           description: username conatins between 3 to 8 letters only
#           example: my_name
#         firstname:
#           type: string
#           description: user's first name
#           example: my_first_name
#         lastname:
#           type: string
#           description: user's last name
#           example: my_last_name
#         country:
#           type: string
#           description: user's country
#           example: Israel
#         password:
#           maxLength: 10
#           minLength: 5
#           type: string
#           description: password conatins between 5 to 10 chars, at least one of them
#             is a number and a special char
#           format: password
#           example: my_name@12
#         email:
#           pattern: email
#           type: string
#           description: user's email
#           example: my_name12@gmail.com
#         # image-url:
#         #   pattern: URL
#         #   type: string
#         #   description: URL for the user's image
#         #   example: https://cloudinary.com/
#       description: Model containing user info
#     LoginScheme:
#       type: object
#       properties:
#         username:
#           maxLength: 8
#           minLength: 3
#           type: string
#           description: username conatins letters only
#         password:
#           maxLength: 10
#           minLength: 5
#           description: password conatins at least one number and one special char
#           format: password
#       example:
#         username: my_name
#         password: my_name@12
#     RecipePreview:
#       type: object
#       properties:
#         id:
#           type: integer
#           description: recipe identifier
#           example: 102
#         title:
#           type: string
#           description: recipe name
#           example: Simple Macaroni and Cheese
#         image:
#           type: string
#           description: recipe image
#           format: URL
#           example: https://spoonacular.com/recipeimages/655455-566x370.jpg
#         readyInMinutes:
#           type: integer
#           description: the time takes to make this recipe
#           example: 45
#         popularity:
#           type: integer
#           description: how many likes got this recipe
#           example: 5987
#         vegetarian:
#           type: boolean
#           description: indication if the recipe is vegetarian
#           example: false
#         vegan:
#           type: boolean
#           description: indication if the recipe is vegan
#           example: false
#         glutenFree:
#           type: boolean
#           description: indication if the recipe is gluten free
#           example: false
  
---
---
openapi: 3.0.0
info:
  title: Recipes API
  description: An API for recipes website
  version: 1.0.1
servers:
- url: /
paths:
  /Register:
    post:
      tags:
      - Auth
      summary: A new user from the client is added to the server
      description: A JSON object contains all the details about the new user
      parameters:
      - name: username
        in: query
        description: The user name in the website
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: firstname
        in: query
        description: The user first name.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: lastname
        in: query
        description: The user last name.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: country
        in: query
        description: The user country.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The user password.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: email
        in: query
        description: The user email.
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        description: Inventory item to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: A new user has been added
        "400":
          description: wrong input parameters
  /Login:
    post:
      tags:
      - Auth
      summary: Logs a user in
      parameters:
      - name: username
        in: query
        description: The user name in the website
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The user password.
        required: true
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login_body'
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Unauthorized
  /Logout:
    post:
      tags:
      - Auth
      summary: Logs user out
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
        "401":
          description: Unauthorized
  /users/CreateRecipe:
    post:
      tags:
      - users
      summary: Create a new recipe
      operationId: createRecipe
      parameters:
      - name: user_id
        in: cookie
        description: The user ID associated with the request.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: title
        in: query
        description: The title of the recipe.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: instruction
        in: query
        description: The instruction of the recipe.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: popularity
        in: query
        description: The popularity of the recipe.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: portion
        in: query
        description: The portion size of the recipe.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: preparation_time
        in: query
        description: The preparation time of the recipe in minutes.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: ingredients
        in: query
        description: The ingredients of the recipe.
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: vegan
        in: query
        description: Indicates if the recipe is vegan.
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: gluten_free
        in: query
        description: Indicates if the recipe is gluten-free.
        required: true
        style: form
        explode: true
        schema:
          type: boolean
      - name: image
        in: query
        description: The image URL of the recipe.
        required: false
        style: form
        explode: true
        schema:
          type: string
      requestBody:
        content:
          application\json:
            schema:
              $ref: '#/components/schemas/Recipe'
        required: true
      responses:
        "201":
          description: Recipe created successfully
        "400":
          description: Invalid input
  /users/favorites:
    post:
      tags:
      - users
      summary: Mark recipe as favorite
      parameters:
      - name: user_id
        in: cookie
        description: The user ID associated with the request.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: recipeId
        in: query
        description: The ID of the recipe to mark as favorite.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: The recipe has been marked as favorite successfully.
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /users/favorite:
    get:
      tags:
      - users
      summary: Get favorite recipes
      parameters:
      - name: user_id
        in: cookie
        description: The user ID associated with the request.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: The favorite recipes retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /users/get_last_viewed:
    get:
      tags:
      - users
      summary: Get last viewed recipes
      parameters:
      - name: user_id
        in: cookie
        description: The user ID associated with the request.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: The last viewed recipes retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200_2'
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /users/add_to_viewed:
    post:
      tags:
      - users
      summary: Add recipe to viewed
      parameters:
      - name: user_id
        in: cookie
        description: The user ID associated with the request.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      - name: recipeId
        in: query
        description: The ID of the recipe to mark as viewed.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/users_add_to_viewed_body'
        required: true
      responses:
        "200":
          description: Successful operation.
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /users/MyRecipes:
    get:
      tags:
      - users
      summary: Get user's recipes
      parameters:
      - name: user_id
        in: cookie
        description: The ID of the user.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation.
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /recipes/Random:
    get:
      tags:
      - recipes
      summary: Get 3 random recipes
      parameters:
      - name: user_id
        in: cookie
        description: The ID of the user.
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation. return 3 random recipes from external API
        "400":
          description: Invalid request format or missing required parameters.
        "500":
          description: Internal server error.
  /last-search:
    get:
      tags:
      - recipes
      summary: Get the last search query
      responses:
        "200":
          description: Successful operation. return the last query
          content:
            application/json:
              schema:
                type: string
  /recipes/search:
    get:
      tags:
      - recipes
      summary: Search recipes
      parameters:
      - name: query
        in: query
        description: The search query for recipes
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: diet
        in: query
        description: The dietary requirement for recipes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: cuisine
        in: query
        description: The cuisine type for recipes
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: intolerances
        in: query
        description: The intolerances for recipes
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
  /recipes/{recipeId}:
    get:
      tags:
      - recipes
      summary: Get recipe by ID
      parameters:
      - name: recipeId
        in: path
        description: The ID of the recipe
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: Successful operation. return the recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
components:
  schemas:
    User:
      required:
      - country
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        username:
          maxLength: 8
          minLength: 3
          type: string
          description: username contains between 3 to 8 letters only and is unique
          example: tavraham
        firstname:
          type: string
          description: user's first name
          example: tal
        lastname:
          type: string
          description: user's last name
          example: avraham
        country:
          type: string
          description: user's country
          example: israel
        password:
          maxLength: 10
          minLength: 5
          type: string
          description: |
            password contains between 5 to 10 chars, at least one of them is number and one and a special char
          format: password
          example: talavraham1!
        email:
          type: string
          description: user's email
          format: email
          example: tabraham@gmail.com
      description: Model containing user info
    Recipe:
      required:
      - image
      - preparation_time
      - title
      type: object
      properties:
        image:
          type: string
          format: binary
        title:
          type: string
          example: kuba
        preparation_time:
          type: integer
          description: Time to prepare recipe in minutes
          example: 30
        popularity:
          type: integer
          description: Number of recipe likes
          example: 5
        vegan:
          type: boolean
          description: Whether the recipe is vegan
          example: true
        gluten_free:
          type: boolean
          description: Whether the recipe is gluten-free
          example: false
        viewed:
          type: boolean
          description: Whether the recipe has been viewed by the user
          example: false
        saved:
          type: boolean
          description: Whether the recipe has been saved to favorites by the user
          example: true
        instruction:
          type: string
          description: how to prepare this recipe
          example: call tal's grandmother
        portion:
          type: integer
          description: number of portions for this recipe
          example: 5
        ingredients:
          type: string
          description: A list of ingredients and quantity for each one of them.
          example: "semolina, beef meat"
    Login_body:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    inline_response_200:
      type: object
      properties:
        access_token:
          type: string
    inline_response_200_1:
      type: object
      properties:
        recipe_id:
          type: object
          description: The recipe details.
          example:
            title: Sample Recipe
            description: This is a sample recipe.
    inline_response_200_2:
      type: object
      properties:
        recipe_id:
          type: integer
          description: The recipe ID.
    users_add_to_viewed_body:
      required:
      - recipe_id
      - user_id
      type: object
      properties:
        user_id:
          type: string
          description: The ID of the user.
        recipe_id:
          type: string
          description: The ID of the recipe.
